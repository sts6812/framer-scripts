require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"distributeLayers":[function(require,module,exports){

module.exports.distributeLayers = {
  globalDefaults: {
    direction: "vertical",
    startOffset: 0
  },
  sameDistance: function(options) {
    var defaults, index, layer, offset, ref;
    defaults = {
      distance: 500
    };
    options = Object.assign({}, this.globalDefaults, defaults, options);
    this._validateOptions(options);
    offset = options.startOffset;
    ref = options.layers;
    for (index in ref) {
      layer = ref[index];
      if (options.direction === "vertical") {
        layer.y = offset;
      } else {
        layer.x = offset;
      }
      offset += options.distance;
    }
    return this._setLayerMetadata(layer, 'methodUsed', 'sameDistance');
  },
  sameMargin: function(options) {
    var defaults, index, layer, offset, ref;
    defaults = {
      margin: 10
    };
    options = Object.assign({}, this.globalDefaults, defaults, options);
    this._validateOptions(options);
    offset = options.startOffset;
    ref = options.layers;
    for (index in ref) {
      layer = ref[index];
      if (options.direction === "vertical") {
        layer.y = offset;
        if (layer.height > 0) {
          offset += layer.height + options.margin;
        }
      } else {
        layer.x = offset;
        if (layer.width > 0) {
          offset += layer.width + options.margin;
        }
      }
    }
    return this._setLayerMetadata(layer, 'methodUsed', 'sameMargin');
  },
  spaced: function(options) {
    var defaults, index, layer, offset, ref, ref1, spacing, totalArea;
    defaults = {
      max: 1000
    };
    options = Object.assign({}, this.globalDefaults, defaults, options);
    this._validateOptions(options);
    totalArea = 0;
    ref = options.layers;
    for (index in ref) {
      layer = ref[index];
      if (options.direction === "vertical") {
        totalArea += layer.height;
      } else {
        totalArea += layer.width;
      }
    }
    spacing = (options.max - totalArea) / (options.layers.length - 1);
    offset = options.startOffset;
    ref1 = options.layers;
    for (index in ref1) {
      layer = ref1[index];
      if (options.direction === "vertical") {
        layer.y = offset;
        if (layer.height > 0) {
          offset += layer.height + spacing;
        }
      } else {
        layer.x = offset;
        if (layer.width > 0) {
          offset += layer.width + spacing;
        }
      }
    }
    return this._setLayerMetadata(layer, 'methodUsed', 'spaced');
  },
  _validateOptions: function(options) {
    if (!options.layers) {
      throw this._error('noLayers');
    }
    if (!_.isArray(options.layers)) {
      throw this._error('layersNotArray');
    }
    if (options.layers.length === 0) {
      throw this._error('layersArrayEmpty');
    }
    if (typeof options.margin === "string") {
      throw this._error('numberAsString', options.margin);
    }
    if (typeof options.startOffset === "string") {
      throw this._error('numberAsString', options.startOffset);
    }
  },
  _error: function(id, value) {
    var err;
    err = null;
    if (id === "numberAsString") {
      err = new Error("Don't put quotation marks around numbers. " + "\"" + value + "\" should be written as " + value + ".");
    }
    if (id === "noLayers") {
      err = new Error("You didn't give distributeLayers.layers any value");
    }
    if (id === "layersNotArray") {
      err = new Error("distributeLayers.layers expects an array");
    }
    if (id === "layersArrayEmpty") {
      err = new Error("The array that you passed to distributeLayers.layers was empty");
    }
    return err;
  },
  _setLayerMetadata: function(layer, key, value) {
    if (!layer.custom) {
      layer.custom = {};
    }
    layer.custom.distributeLayers = {};
    return layer.custom.distributeLayers[key] = value;
  }
};

// ---
// generated by coffee-script 1.9.2
    
   },{}]},{},[])
